{
  "base_template": {
    "name": "TRMM_Base v1",
    "html": "<html>\n\n<head>\n    <style>\n        /* —— PDF page settings —— */\n        @page {\n            margin: 0.5in;\n        }\n\n        /* —— Color palette (theme) —— */\n        :root {\n            --header-bg: #2c3e50;\n            --header-text: #ffffff;\n            --border-color: #dddddd;\n            --table-header-bg: #f2f2f2;\n            --status-ready-bg: #eaf7ec;\n            --status-ready-badge: #28a745;\n            --status-not-ready-bg: #fbebee;\n            --status-not-ready-badge: #dc3545;\n            --status-unknown-bg: #fff9e6;\n            --status-unknown-badge: #ffc107;\n            --badge-already-bg: #17a2b8;\n        }\n\n        /* —— Typography & utilities (structure) —— */\n        body {\n            font-family: sans-serif;\n            color: #333;\n        }\n\n        .section {\n            margin-top: 20px;\n        }\n\n        .text-danger {\n            color: var(--status-not-ready-badge);\n            font-weight: bold;\n        }\n\n        /* —— Header layout (structure) —— */\n        .report-header {\n            background-color: var(--header-bg);\n            color: var(--header-text);\n            padding: 20px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n        }\n\n        .header-logo {\n            width: 80px;\n            margin-right: 25px;\n            flex-shrink: 0;\n        }\n\n        .header-date {\n            margin-left: auto;\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .report-header h1 {\n            font-size: 24px;\n            margin: 0 0 5px;\n        }\n\n        .report-header h2 {\n            font-size: 16px;\n            margin: 0;\n            opacity: 0.9;\n        }\n\n        /* —— Table basics (structure) —— */\n        .report-table {\n            border-collapse: collapse;\n            width: 100%;\n            font-size: 12px;\n        }\n\n        .report-table th,\n        .report-table td {\n            border: 1px solid var(--border-color);\n            padding: 8px 12px;\n            text-align: left;\n            vertical-align: middle;\n        }\n\n        .report-table thead th {\n            background-color: var(--table-header-bg);\n            font-weight: bold;\n        }\n\n        /* —— Badge shape (structure) —— */\n        .status-badge {\n            display: inline-block;\n            padding: 4px 10px;\n            border-radius: 12px;\n            color: #fff;\n            font-weight: bold;\n            font-size: 11px;\n            text-align: center;\n            white-space: nowrap;\n        }\n\n        /* —— Stub classes for per‑report overrides —— */\n        .status-ready {}\n\n        .status-not-ready {}\n\n        .status-unknown {}\n\n        .badge-ready {}\n\n        .badge-not-ready {}\n\n        .badge-unknown {}\n\n        .badge-already {}\n    </style>\n</head>\n\n<body>\n    {% block content %}{% endblock %}\n</body>\n\n</html>"
  },
  "template": {
    "name": "Agent Uptime_By Client (html) v1.5",
    "template_css": "",
    "template_md": "{% block content %}\r\n<style>\r\n  @media print {\r\n    .timeline-bar {\r\n      page-break-inside: avoid;\r\n    }\r\n  }\r\n\r\n  .small-logo {\r\n    height: 80px;\r\n    width: auto;\r\n  }\r\n\r\n  .timeline-container {\r\n    margin-top: 40px;\r\n    padding-right: 20px;\r\n  }\r\n\r\n  .timeline-row {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .timeline-bar {\r\n    position: relative;\r\n    height: 16px;\r\n    background-color: green;\r\n    width: 100%;\r\n  }\r\n\r\n  .timeline-block {\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n    height: 100%;\r\n    background-color: red;\r\n    border: 1px solid #000;\r\n  }\r\n\r\n  .timeline-label {\r\n    font-size: 11px;\r\n    margin-bottom: 4px;\r\n  }\r\n</style>\r\n\r\n<div class=\"report-header\">\r\n  <img src=\"https://github.com/nuvemquery/reporting-templates/blob/master/assets/gbtnavy%20(256).png?raw=true\"\r\n       alt=\"Logo\"\r\n       class=\"header-logo small-logo\">\r\n  <div class=\"header-date\">\r\n    <h1>{{ client.name }} - Agent Uptime Report</h1>\r\n    <h2>Report Date: {{ report_run_timestamp.strftime('%Y-%m-%d') }}</h2>\r\n  </div>\r\n</div>\r\n\r\n{% set cutoff = timedelta_30_days %}\r\n{% set alert_events = [] %}\r\n\r\n<div class=\"section timeline-container\" id=\"timelineChart\">\r\n  <h2>Agent Timeline (Green = Online, Red = Offline)</h2>\r\n</div>\r\n\r\n<h2>Downtime List</h2>\r\n\r\n<table class=\"report-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Agent ID</th>\r\n      <th>Message</th>\r\n      <th>Time Off</th>\r\n      <th>Time On</th>\r\n      <th>Downtime</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {% for item in data_sources.allFieldsAlerts %}\r\n      {% if item.alert_type == \"availability\"\r\n            and item.resolved\r\n            and item.alert_time is defined\r\n            and item.resolved_on is defined\r\n            and item.agent__hostname is defined\r\n            and item.alert_time >= cutoff %}\r\n        {% set downtime = (item.resolved_on - item.alert_time).total_seconds() / 60 %}\r\n        <tr>\r\n          <td>{{ item.agent__hostname }}</td>\r\n          <td>{{ item.message }}</td>\r\n          <td>{{ item.alert_time.strftime('%Y-%m-%d %H:%M') }}</td>\r\n          <td>{{ item.resolved_on.strftime('%Y-%m-%d %H:%M') }}</td>\r\n          {% set dt_mins = downtime | round(0, 'floor') %}\r\n          {% set dt_days = dt_mins // 1440 %}\r\n          {% set dt_hrs  = (dt_mins % 1440) // 60 %}\r\n          {% set dt_min  = dt_mins % 60 %}\r\n          <td>\r\n            {% if dt_days > 0 %}{{ dt_days }}d {% endif %}\r\n            {% if dt_hrs  > 0 %}{{ dt_hrs  }}h {% endif %}\r\n            {% if dt_min > 0 or (dt_days == 0 and dt_hrs == 0) %}{{ dt_min }}m{% endif %}\r\n          </td>\r\n        </tr>\r\n        {% set _ = alert_events.append({\r\n          \"agent\": item.agent__hostname,\r\n          \"start\": item.alert_time.isoformat(),\r\n          \"end\":   item.resolved_on.isoformat()\r\n        }) %}\r\n      {% endif %}\r\n    {% endfor %}\r\n  </tbody>\r\n</table>\r\n\r\n<script>\r\n  document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const events = {{ alert_events | tojson | safe }};\r\n    const container = document.getElementById(\"timelineChart\");\r\n    container.style.margin = \"0 20px\";\r\n\r\n    if (!events.length) {\r\n      const p = document.createElement(\"p\");\r\n      p.textContent = \"No downtime data found.\";\r\n      container.appendChild(p);\r\n      return;\r\n    }\r\n\r\n    const minTime = Math.min(...events.map(e => new Date(e.start).getTime()));\r\n    const maxTime = Math.max(...events.map(e => new Date(e.end).getTime()));\r\n    const range   = maxTime - minTime;\r\n\r\n    const grouped = {};\r\n    events.forEach(e => {\r\n      if (!grouped[e.agent]) grouped[e.agent] = { events: [], totalDowntime: 0 };\r\n      const start   = new Date(e.start);\r\n      const end     = new Date(e.end);\r\n      const minutes = (end - start) / 60000;\r\n      grouped[e.agent].events.push({ start, end });\r\n      grouped[e.agent].totalDowntime += minutes;\r\n    });\r\n\r\n    Object.entries(grouped).forEach(([agent, data]) => {\r\n      const totalMins = Math.round(data.totalDowntime);\r\n      const days      = Math.floor(totalMins / 1440);\r\n      const hrs       = Math.floor((totalMins % 1440) / 60);\r\n      const min       = totalMins % 60;\r\n      const summary   = `(Offline ${days} day${days !== 1 ? 's' : ''} ` +\r\n                        `${hrs} hr${hrs !== 1 ? 's' : ''} ${min} min in last 30 days)`;\r\n\r\n      const row  = document.createElement(\"div\");\r\n      row.className = \"timeline-row\";\r\n      row.style.marginBottom = \"30px\";\r\n\r\n      const label = document.createElement(\"div\");\r\n      label.className = \"timeline-label\";\r\n      label.innerHTML = `<strong>${agent}</strong> ${summary}`;\r\n      row.appendChild(label);\r\n\r\n      const barWrapper = document.createElement(\"div\");\r\n      barWrapper.style.position = \"relative\";\r\n\r\n      const bar = document.createElement(\"div\");\r\n      bar.className = \"timeline-bar\";\r\n      bar.style.marginBottom = \"4px\";\r\n\r\n      data.events.forEach(({ start, end }) => {\r\n        const offset = ((start.getTime() - minTime) / range) * 100;\r\n        const width  = ((end.getTime() - start.getTime()) / range) * 100;\r\n\r\n        const block = document.createElement(\"div\");\r\n        block.className = \"timeline-block\";\r\n        block.style.left  = offset + \"%\";\r\n        block.style.width = width  + \"%\";\r\n        block.title = `${start.toLocaleString()} – ${end.toLocaleString()}`;\r\n        bar.appendChild(block);\r\n      });\r\n\r\n      const tickRow = document.createElement(\"div\");\r\n      tickRow.style.borderTop = \"1px solid #ccc\";\r\n      tickRow.style.position  = \"relative\";\r\n      tickRow.style.height    = \"16px\";\r\n\r\n      const totalDays = Math.ceil(range / (1000 * 60 * 60 * 24));\r\n      for (let i = 0; i <= totalDays; i++) {\r\n        const tick = document.createElement(\"div\");\r\n        tick.style.position = \"absolute\";\r\n        tick.style.left     = ((i / totalDays) * 100) + \"%\";\r\n        tick.style.height   = \"100%\";\r\n        tick.style.borderLeft = \"1px dashed #888\";\r\n        tick.style.fontSize   = \"9px\";\r\n        tick.style.color      = \"#333\";\r\n        tick.style.paddingLeft = \"2px\";\r\n        tick.style.whiteSpace  = \"nowrap\";\r\n\r\n        const dayDate = new Date(minTime + i * 24 * 60 * 60 * 1000);\r\n        tick.textContent = dayDate.toLocaleDateString(undefined, {\r\n          weekday: 'short', day: 'numeric'\r\n        });\r\n\r\n        tickRow.appendChild(tick);\r\n      }\r\n\r\n      barWrapper.appendChild(bar);\r\n      barWrapper.appendChild(tickRow);\r\n      row.appendChild(barWrapper);\r\n      container.appendChild(row);\r\n    });\r\n\r\n    setTimeout(() => {\r\n      window.html2canvas = window.html2canvas || window[\"html2canvas\"];\r\n      if (typeof html2canvas === \"function\") {\r\n        html2canvas(container).then(canvas => {\r\n          const img = document.createElement(\"img\");\r\n          img.src = canvas.toDataURL(\"image/png\");\r\n          img.style.maxWidth = \"100%\";\r\n          img.alt = \"Agent Timeline Snapshot\";\r\n          container.innerHTML = \"\";\r\n          container.appendChild(img);\r\n        }).catch(err => console.error(\"html2canvas failed:\", err));\r\n      } else {\r\n        console.warn(\"html2canvas not loaded.\");\r\n      }\r\n    }, 300);\r\n  });\r\n</script>\r\n{% endblock %}",
    "type": "html",
    "depends_on": [
      "client"
    ],
    "template_variables": "report_run_timestamp: !now\ntimedelta_30_days: !now days=-30\ndata_sources:\n  allFieldsAlerts:\n    model: alert\n    only:\n      - agent__hostname\n      - message\n      - alert_time\n      - resolved_on\n      - alert_type\n      - agent_id\n      - resolved\n    filter:\n      agent__site__client_id: '{{client.id}}'"
  },
  "assets": []
}
